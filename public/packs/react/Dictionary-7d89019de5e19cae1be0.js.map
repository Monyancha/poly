{"version":3,"file":"react/Dictionary-7d89019de5e19cae1be0.js","sources":["webpack:///webpack/bootstrap fd057042d165d6d54eac","webpack:///app/javascript/packs/react/Dictionary.es6.jsx"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fd057042d165d6d54eac","class Dictionary extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPhraseInputActive: false,\n      isTargetInputActive: false,\n      isContinuousInputActive: false,\n      isInputVideo: false,\n      isVideoRecording: false,\n      phrasePairs: this.props.initialPhrasePairs,\n      sourcePhrase: '',\n      targetPhrase: '',\n      stream: '',\n      isVideoNotAvailable: true\n    };\n    this.onAddNewPhraseButtonClick = this.onAddNewPhraseButtonClick.bind(this);\n    this.onSourcePhraseChange = this.onSourcePhraseChange.bind(this);\n    this.onSourcePhraseSubmit = this.onSourcePhraseSubmit.bind(this);\n    this.onSourceVideoSubmit = this.onSourceVideoSubmit.bind(this);\n    this.onTargetPhraseChange = this.onTargetPhraseChange.bind(this);\n    this.onTargetPhraseSubmit = this.onTargetPhraseSubmit.bind(this);\n    this.onTargetVideoSubmit = this.onTargetVideoSubmit.bind(this);\n    this.onDeletePhrasePair = this.onDeletePhrasePair.bind(this);\n    this.onCancelEditPhrase = this.onCancelEditPhrase.bind(this);\n    this.onToggleInputType = this.onToggleInputType.bind(this);\n    this.onCloseVideoComponent = this.onCloseVideoComponent.bind(this);\n    this.onStopRecordingClick = this.onStopRecordingClick.bind(this);\n    this.onStartRecordingClick = this.onStartRecordingClick.bind(this);\n    this.onRenderVideoInput = this.onRenderVideoInput.bind(this);\n    this.onSaveStream = this.onSaveStream.bind(this);\n    this.onStopStream = this.onStopStream.bind(this);\n    this.onClearStream = this.onClearStream.bind(this);\n    this.renderPhrasePairs = this.renderPhrasePairs.bind(this);\n    this.renderPreSourcePhrase = this.renderPreSourcePhrase.bind(this);\n    this.renderCreateNewPhraseButton = this.renderCreateNewPhraseButton.bind(this);\n    this.renderPhraseInputFields = this.renderPhraseInputFields.bind(this);\n    this.renderTargetInput = this.renderTargetInput.bind(this);\n    this.renderInputOptions = this.renderInputOptions.bind(this);\n    this.renderVideoInput = this.renderVideoInput.bind(this);\n    this.renderInputMethod = this.renderInputMethod.bind(this);\n    this.onSaveEditPhrase = this.onSaveEditPhrase.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (this.refs.sourceInput) {\n      this.refs.sourceInput.blur();\n    }\n    if (this.refs.targetInput) {\n      this.refs.targetInput.blur();\n    }\n    if (this.state.isPhraseInputActive && this.refs.sourceInput && !this.props.isEditingBook) {\n      this.refs.sourceInput.focus();\n    }\n    if (this.state.isTargetInputActive && this.refs.targetInput && !this.props.isEditingBook) {\n      this.refs.targetInput.focus();\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({ phrasePairs: newProps.initialPhrasePairs });\n  }\n\n  onAddNewPhraseButtonClick(props) {\n    this.setState({ isPhraseInputActive: true});\n  }\n\n  onSourcePhraseChange(e) {\n    this.setState({ sourcePhrase: e.target.value });\n  }\n\n  onSourcePhraseSubmit(e) {\n    e.preventDefault();\n    if (this.state.sourcePhrase) {\n      this.props.onSourcePhraseSubmit(this.state.sourcePhrase);\n      this.setState({\n        isTargetInputActive: !this.state.isTargetInputActive,\n        sourcePhrase: '',\n      });\n    } else {\n      alert(\"Source phrase is empty\");\n    }\n  }\n\n  onSourceVideoSubmit(video) {\n    this.setState({ sourcePhrase: video });\n    if(this.state.sourcePhrase) {\n      this.props.onSourcePhraseSubmit(this.state.sourcePhrase, this.state.isPhraseInputActive),\n      this.setState({\n        isTargetInputActive: !this.state.isTargetInputActive,\n        sourcePhrase: '',\n      });\n    } else {\n      bootbox.alert({\n        message: 'Source phrase is empty',\n        closeButton: false,\n      });\n    }\n  }\n\n  onTargetPhraseChange(e) {\n    this.setState({targetPhrase: e.target.value });\n  }\n\n  onTargetPhraseSubmit(e) {\n    e.preventDefault()\n    if(this.state.targetPhrase) {\n      this.props.onTargetPhraseSubmit(this.state.targetPhrase),\n      this.setState({\n        isTargetInputActive: !this.state.isTargetInputActive,\n        targetPhrase: '',\n      });\n    } else {\n      bootbox.alert({\n        message: 'Target phrase is empty',\n        closeButton: false,\n      });\n    }\n  }\n\n  onTargetVideoSubmit(video) {\n    this.setState({targetPhrase: video });\n    if(this.state.targetPhrase) {\n      this.props.onTargetPhraseSubmit(this.state.targetPhrase),\n      this.setState({\n        isPhraseInputActive: !this.state.isPhraseInputActive,\n        isTargetInputActive: !this.state.isTargetInputActive,\n        targetPhrase: '',\n      });\n    } else {\n      bootbox.alert({\n        message: 'Target phrase is empty',\n        closeButton: false,\n      });\n    }\n  }\n\n  onTargetPhraseMultipleSubmit(e) {\n    e.preventDefault()\n    this.props.onTargetPhraseSubmit(this.state.targetPhrase),\n    this.setState({\n      isTargetInputActive: !this.state.isTargetInputActive,\n      targetPhrase: \"\"\n    });\n  }\n\n  onContinuousInputClick() {\n    this.setState({\n        isContinuousInputActive: !this.state.isContinuousInputActive\n    });\n  }\n\n  onDeletePhrasePair(phrasePairId) {\n    bootbox.confirm({\n        message: 'Are you sure you want to delete this phrase?',\n        closeButton: false,\n        callback: (result) => {\n          if (result === true) {\n            $.ajax({\n              url: '/phrase_pairs/' + phrasePairId,\n              type: 'DELETE',\n              success: function (response) {\n                const phrasePairs = this.state.phrasePairs;\n                const indexToRemove = _.findIndex(phrasePairs, (phrasePair) => {\n                  return phrasePair.id == response.id;\n                });\n                phrasePairs.splice(indexToRemove, 1);\n                this.setState({ phrasePairs });\n              }.bind(this),\n              error() {\n                console.log('Error: Could not delete phrase pair');\n              },\n            });\n          }\n        }\n    });\n  }\n\n  onSaveEditPhrase(phrasePairId, sourcePhrase, targetPhrase){\n    let { phrasePairs } = this.state;\n    for( var i = 0 ; i < phrasePairs.length; i++){\n      if(phrasePairs[i]['id'] == phrasePairId){\n        phrasePairs[i]['source_phrase'] = sourcePhrase;\n        phrasePairs[i]['target_phrase'] = targetPhrase;\n        break;\n      }\n    }\n    this.setState({phrasePairs});\n  }\n\n  onCancelEditPhrase() {\n    let phrasePairs = this.state.phrasePairs;\n    if (this.state.isTargetInputActive) {\n      phrasePairs.splice(-1, 1);\n    }\n    this.setState({\n      phrasePairs,\n      isTargetInputActive: false,\n      isPhraseInputActive: false,\n      isInputVideo: false,\n      isVideoRecording: false,\n      sourcePhrase: \"\",\n      targetPhrase: \"\"\n    });\n\n    if (this.state.stream !== '') {\n      this.onStopStream();\n    }\n  }\n\n// Video Zone\n\n  onToggleInputType() {\n    this.setState({ isInputVideo: !this.state.isInputVideo });\n  }\n\n  onCloseVideoComponent() {\n    this.setState({\n      isVideoRecording: false,\n      isInputVideo: false\n    });\n    if (this.state.stream !== '') {\n      this.onStopStream();\n    }\n  }\n\n  onStopRecordingClick() {\n    this.setState({ isVideoRecording: !this.state.isVideoRecording });\n  }\n\n  onStartRecordingClick() {\n    this.setState({ isVideoRecording: !this.state.isVideoRecording });\n  }\n\n  onRenderVideoInput() {\n    if (this.state.isInputVideo) {\n      const video = document.getElementById('camera-stream');\n      video.muted = true;\n      const self = this;\n\n      if (navigator.mediaDevices === undefined) {\n        navigator.mediaDevices = {};\n      }\n\n      if (navigator.mediaDevices.getUserMedia === undefined) {\n        navigator.mediaDevices.getUserMedia = (constraints) => {\n          const getUserMedia = (navigator.getUserMedia ||\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia);\n\n          if (!getUserMedia) {\n            self.onCloseVideoComponent();\n            alert('Sorry, your browser does not support the video recording.\\n(In order to access the video recording, try again with one of these browsers: Chrome, Firefox, Edge, Opera.)');\n            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n          }\n          return new Promise((resolve, reject) => {\n            getUserMedia.call(navigator, constraints, resolve, reject);\n          });\n        };\n      }\n      navigator.mediaDevices.getUserMedia({ audio: true, video: true })\n      .then((stream) => {\n        self.onSaveStream(stream);\n        video.controls = false;\n        video.src = window.URL.createObjectURL(stream);\n      })\n      .catch((err) => {\n        console.log(err.name + \": \" + err.message);\n      });\n    }\n  }\n\n  onSaveStream(stream) {\n    this.setState({stream: stream});\n  }\n\n  onStopStream() {\n    const tracks = this.state.stream.getTracks();\n    tracks[0].stop();\n    tracks[1].stop();\n    this.onClearStream();\n  }\n  onClearStream() {\n    this.setState({stream: ''});\n  }\n\n// Render Zone\n  renderPhrasePairs() {\n    return this.state.phrasePairs.map((phrasePair, index) => {\n      if (this.props.isNewPhrase) {\n        return (\n            <PhrasePair\n              id={phrasePair.id}\n              isOwnedByCurrentUser={this.props.isOwnedByCurrentUser}\n              initialSourcePhrase={phrasePair.source_phrase}\n              initialTargetPhrase={phrasePair.target_phrase}\n              key={index}\n              onDeletePhrasePair={this.onDeletePhrasePair}\n              menu={this.props.menu}\n              flip={this.props.flip}\n              save={this.props.save}\n              delete={this.props.delete}\n              edit={this.props.edit}\n              close={this.props.close}\n              newPhrase=\"newPhrase\" />\n        );\n      }\n      return (\n        <PhrasePair\n          id={phrasePair.id}\n          isOwnedByCurrentUser={this.props.isOwnedByCurrentUser}\n          initialSourcePhrase={phrasePair.source_phrase}\n          initialTargetPhrase={phrasePair.target_phrase}\n          key={index}\n          onDeletePhrasePair={this.onDeletePhrasePair}\n          onSaveEditPhrase={this.onSaveEditPhrase}\n          menu={this.props.menu}\n          flip={this.props.flip}\n          save={this.props.save}\n          delete={this.props.delete}\n          edit={this.props.edit}\n          close={this.props.close}\n        />\n      );\n    });\n  }\n\n  renderPreSourcePhrase() {\n    if (this.state.isPhraseInputActive == true && this.state.isTargetInputActive == false) {\n      return (\n         <li className=\"entry pre\">\n          <ul>\n            <li className=\"source\">\n              <p><Progress /></p>\n            </li>\n            <li className=\"target\">\n              <p></p>\n            </li>\n          </ul>\n        </li>\n      );\n    }\n    if (this.state.isPhraseInputActive == false && this.state.phrasePairs.length == 0) {\n      return <DummyContent />;\n    }\n  }\n\n  renderCreateNewPhraseButton() {\n    if (this.props.isOwnedByCurrentUser) {\n      if (this.state.isPhraseInputActive) {\n        if (this.state.isInputVideo) {} else {\n          return (\n            <div>\n              {this.renderPhraseInputFields()}\n            </div>\n          );\n        }\n        return (\n          <div>{this.renderPhraseInputFields()}</div>\n        );\n      }\n      return (\n        <button className=\"addPhrase\" onClick={this.onAddNewPhraseButtonClick}>+</button>\n      );\n    }\n  }\n\n  renderPhraseInputFields() {\n    if (this.state.isTargetInputActive) {\n      return (\n        <div>\n          { this.renderInputMethod() }\n          { this.renderTargetInput() }\n        </div>\n      );\n    }\n    return (\n      <div>\n        { this.renderInputMethod() }\n        <form className=\"newPhrase\" onSubmit={this.onSourcePhraseSubmit}>\n          <input\n            ref=\"sourceInput\"\n            value={this.state.sourcePhrase}\n            onChange={this.onSourcePhraseChange}\n            className=\"sourcePhrase input\"\n            type=\"text\"\n            placeholder={this.props.sourceLanguage + \" phrase\"}/>\n          <button className=\"savePhrase\">Save</button>\n        </form>\n      </div>\n    );\n  }\n\n  renderTargetInput() {\n    return (\n      <form\n        className=\"newPhrase\"\n        onSubmit={this.onTargetPhraseSubmit} >\n        <input\n          ref=\"targetInput\"\n          value={this.state.targetPhrase}\n          onChange={this.onTargetPhraseChange}\n          className=\"targetPhrase input\"\n          type=\"text\"\n          dir=\"auto\"\n          placeholder={this.props.targetLanguage + \" phrase\"} />\n        <button className=\"savePhrase\"> Save </button>\n      </form>\n    );\n  }\n\n  renderInputOptions() {\n    if (!this.state.isInputVideo) {\n      const videoButtonClass = 'video icon' + this.state.videoButtonClass;\n      return (\n        <span className=\"inputOptions\">\n          <button title=\"Text\" className=\"text icon selectedInput\"><img src={this.props.text} alt=\"text\"/></button>\n          <button title=\"Video\" onClick={this.onToggleInputType} className=\"video icon\"><img src={this.props.video} alt=\"video\"/></button>\n          <button title=\"Cancel\" onClick={this.onCancelEditPhrase} className=\"close icon\"><img src={this.props.close} alt=\"close\"/></button>\n        </span>\n      );\n    }\n  }\n\n  renderVideoInput() {\n    if (this.state.isInputVideo) {\n      return (\n        <div ref=\"video\">\n          <Video\n            onRenderVideoInput={this.onRenderVideoInput}\n            renderRecordButton={this.renderRecordButton}\n            onCancelEditPhrase={this.onCancelEditPhrase}\n            onCloseVideoComponent={this.onCloseVideoComponent}\n            onStartRecordingClick={this.onStartRecordingClick}\n            onStopRecordingClick={this.onStopRecordingClick}\n            onSourceVideoSubmit={this.onSourceVideoSubmit}\n            onTargetVideoSubmit={this.onTargetVideoSubmit}\n            onToggleInputType={this.onToggleInputType}\n            onClearStream={this.onClearStream}\n            closeAlt={this.props.closeAlt}\n            isVideoRecording={this.state.isVideoRecording}\n            isInputVideo={this.state.isInputVideo}\n            onSaveStream={this.onSaveStream}\n            onStopStream={this.onStopStream}\n            mediaConstraints={this.state.mediaConstraints}\n            stream={this.state.stream}\n            isTargetInputActive={this.state.isTargetInputActive}\n            sourceLanguage={this.props.sourceLanguage}\n            targetLanguage={this.props.targetLanguage}\n            author={this.props.author}\n            width={600}\n            videoPhrase={true}\n          />\n        </div>\n      );\n    }\n  }\n\n  // TODO: Consider the flow of canceling a phrase in progress.\n  renderInputMethod() {\n    return (\n      <div className=\"inputMethod\">\n        {this.renderInputOptions()}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"dictionary\">\n        <ul className=\"content\">{this.renderPhrasePairs()}</ul>\n        {this.renderPreSourcePhrase()}\n        {this.renderVideoInput()}\n        {\n          !this.state.isInputVideo ?\n            this.renderCreateNewPhraseButton()\n          :\n            !this.renderCreateNewPhraseButton()\n        }\n      </div>\n    );\n  }\n}\n\nDictionary.propTypes = {\n  initialPhrasePairs: React.PropTypes.arrayOf(React.PropTypes.shape({\n    book_id: React.PropTypes.number,\n    created_at: React.PropTypes.string,\n    id: React.PropTypes.number,\n    source_phrase: React.PropTypes.string,\n    target_phrase: React.PropTypes.string,\n    updated_at: React.PropTypes.string,\n  })),\n  onSourcePhraseSubmit: React.PropTypes.func,\n  onTargetPhraseSubmit: React.PropTypes.func,\n  isOwnedByCurrentUser: React.PropTypes.bool,\n  menu: React.PropTypes.string,\n  flip: React.PropTypes.string,\n  save: React.PropTypes.string,\n  delete: React.PropTypes.string,\n  edit: React.PropTypes.string,\n  close: React.PropTypes.string,\n};\n\n\n\n// WEBPACK FOOTER //\n// app/javascript/packs/react/Dictionary.es6.jsx"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7DA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAwCA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AArBA;AAuBA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAWA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AARA;AAFA;AAcA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAXA;AAcA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AADA;AA4BA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AALA;AAYA;;;;AAjeA;AACA;AAmeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;;;;A","sourceRoot":""}